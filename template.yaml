AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  Calendars:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-Calendars
  CalendarBlocks:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-CalendarBlocks
  BlockCalendars:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-BlockCalendars
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: BlockCalendars
      CodeUri: src
      Handler: main.block_calendars
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref CalendarBlocks
        - DynamoDBCrudPolicy:
            TableName: !Ref Calendars
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt InterviewNotifications.TopicName
      Environment:
        Variables:
          TABLE_NAME: !Ref CalendarBlocks
          TABLE_ARN: !GetAtt CalendarBlocks.Arn
          TABLE_NAME_2: !Ref Calendars
          TABLE_ARN_2: !GetAtt Calendars.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TOPIC_NAME: !GetAtt InterviewNotifications.TopicName
          TOPIC_ARN: !Ref InterviewNotifications
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: cron(0 15 ? * 6 *)
          Metadata:
            StackeryName: BlockCalendarsTimer
  ClearBlocks:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ClearBlocks
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ClearBlocks
      CodeUri: src
      Handler: main.clear_blocks
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref CalendarBlocks
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt InterviewNotifications.TopicName
      Events:
        Timer2:
          Type: Schedule
          Properties:
            Schedule: cron(0 8 ? * 2 *)
          Metadata:
            StackeryName: ClearBlocksTimer
      Environment:
        Variables:
          TABLE_NAME: !Ref CalendarBlocks
          TABLE_ARN: !GetAtt CalendarBlocks.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TOPIC_NAME: !GetAtt InterviewNotifications.TopicName
          TOPIC_ARN: !Ref InterviewNotifications
  InterviewNotifications:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-InterviewNotifications
  InterviewsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} Env ${EnvironmentTagName}
        - ResourceName: Thiscovery Interviews API
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /v1/interview-appointment:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InterviewAppointment.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  AppontmentTypes:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-AppontmentTypes
  InterviewAppointment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-InterviewAppointment
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: InterviewAppointment
      CodeUri: src
      Handler: appointments.interview_appointment_api
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref AppontmentTypes
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt InterviewNotifications.TopicName
      Events:
        InterviewsApiPOSTv1interviewappointment:
          Type: Api
          Properties:
            Path: /v1/interview-appointment
            Method: POST
            RestApiId: !Ref InterviewsApi
      Environment:
        Variables:
          TABLE_NAME: !Ref AppontmentTypes
          TABLE_ARN: !GetAtt AppontmentTypes.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TOPIC_NAME: !GetAtt InterviewNotifications.TopicName
          TOPIC_ARN: !Ref InterviewNotifications
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvConfiglambdamemorysizeAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/lambda/memory-size
  EnvConfiglambdatimeoutAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/lambda/timeout
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
Metadata:
  EnvConfigParameters:
    EnvConfiglambdamemorysizeAsString: lambda.memory-size
    EnvConfiglambdatimeoutAsString: lambda.timeout